import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) throws IOException {

//        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader br = new BufferedReader(new FileReader("sample_input.txt"));

        int testCaseCnt = Integer.parseInt(br.readLine());

//        System.out.println("10101101110100111001100100110110100001010001101010100111010100001000100100100011101001000010101".length());
//        System.out.println("10101101110100111001100100110110100001010001101010".length());

        HashMap<String, Integer> mapC = new HashMap<>();
        HashMap<String, Integer> mapBL = new HashMap<>();
        HashMap<String, Integer> mapBG = new HashMap<>();
        HashMap<String, Integer> mapA = new HashMap<>();

        mapC.put("1110010", 0);
        mapC.put("1100110", 1);
        mapC.put("1101100", 2);
        mapC.put("1000010", 3);
        mapC.put("1011100", 4);
        mapC.put("1001110", 5);
        mapC.put("1010000", 6);
        mapC.put("1000100", 7);
        mapC.put("1001000", 8);
        mapC.put("1110100", 9);

        mapBL.put("0001101",0);
        mapBL.put("0011001",1);
        mapBL.put("0010011",2);
        mapBL.put("0111101",3);
        mapBL.put("0100011",4);
        mapBL.put("0110001",5);
        mapBL.put("0101111",6);
        mapBL.put("0111011",7);
        mapBL.put("0110111",8);
        mapBL.put("0001011",9);

        mapBG.put("0100111", 0);
        mapBG.put("0110011", 1);
        mapBG.put("0011011", 2);
        mapBG.put("0100001", 3);
        mapBG.put("0011101", 4);
        mapBG.put("0111001", 5);
        mapBG.put("0000101", 6);
        mapBG.put("0010001", 7);
        mapBG.put("0001001", 8);
        mapBG.put("0010111", 9);

        mapA.put("LLLLLL", 0);
        mapA.put("LLGLGG", 1);
        mapA.put("LLGGLG", 2);
        mapA.put("LLGGGL", 3);
        mapA.put("LGLLGG", 4);
        mapA.put("LGGLLG", 5);
        mapA.put("LGGGLL", 6);
        mapA.put("LGLGLG", 7);
        mapA.put("LGLGGL", 8);
        mapA.put("LGGLGL", 9);

        for (int t = 1; t <= testCaseCnt; t++) {
            String str = br.readLine();
            String strOriginal = str;

            List<String> list = new ArrayList<>();

            // 1. 정방향 돌고
            int index = strOriginal.indexOf("101");
            strOriginal = strOriginal.substring(index);
            if(index == -1 || strOriginal.length() < 95){
                System.out.printf("#%d 0\n", t);
                continue;
            }

            while(strOriginal.indexOf("101") != -1){
                index = strOriginal.indexOf("101");
                strOriginal = strOriginal.substring(index);
                if(strOriginal.length() < 95){
                    break;
                }
                String target = strOriginal.substring(0, 95);
                String dividerStr = target.substring(45, 50);
                String endStr = target.substring(92,95);

                // 중간과 끝이 유효한 데이터가 아니면 넘어가
                if( !"01010".equals(dividerStr) || !"101".equals(endStr) ){
                    strOriginal = strOriginal.substring(2);
                    continue;
                }

                // 쉬운 partC부터 발라내자.
                // c코드가 없으면 중단
                boolean isValid = true;
                StringBuilder c = new StringBuilder();
                String partC = target.substring(50, 92);
                for (int i = 0; i < 6; i++) {
                    String code = partC.substring(i*7, (i+1)*7);
                    if(!mapC.containsKey(code)) {
                        isValid = false;
                        break;
                    }
                    c.append(mapC.get(code));
                }
                if(!isValid){
                    strOriginal = strOriginal.substring(2);
                    continue;
                }

                // partB
                StringBuilder b = new StringBuilder();
                StringBuilder aCode = new StringBuilder();
                StringBuilder a = new StringBuilder();
                String partB = target.substring(3, 45);
                for (int i = 0; i < 6; i++) {
                    String code = partB.substring(i*7, (i+1)*7);

                    // L코드 거나
                    if( mapBL.containsKey(code)){
                        b.append(mapBL.get(code));
                        aCode.append("L");
//                        G코드 거나
                    }else if (mapBG.containsKey(code)){
                        b.append(mapBG.get(code));
                        aCode.append("G");
                    }else{
                        // L도 G도 아니면 유효하지 않음.
                        isValid = false;
                        break;
                    }
                }
                if(!isValid){
                    strOriginal = strOriginal.substring(2);
                    continue;
                }

                if(!mapA.containsKey(aCode.toString())) {
                    strOriginal = strOriginal.substring(2);
                    continue;
                }else {
                    a.append(mapA.get(aCode.toString()));
                }

//                System.out.println("a : " + a);
//                System.out.println("b : " + b);
//                System.out.println("c : " + c);

                StringBuilder barcode = new StringBuilder();
                barcode.append(a).append(b).append(c);

                //검증
                int sum = 0;
                for (int i = 0; i < barcode.length()-1; i++) {
                    if(i % 2 == 0) {
                        sum += barcode.charAt(i) - '0';
                    }else {
                        sum += (barcode.charAt(i) - '0') * 3;
                    }
                }
                int checkValue = 10 - (sum % 10);

                if(c.charAt(5) - '0' == checkValue) {
                    list.add(barcode.toString());
                    strOriginal = strOriginal.substring(2);
                }else {
                    strOriginal = strOriginal.substring(2);
                }
            }

            // 2. 역방향 돌자
            String strReverse = new StringBuilder(str).reverse().toString();
            index = strReverse.indexOf("101");
            strReverse = strReverse.substring(index);
            if(index == -1 || strReverse.length() < 95){
                System.out.printf("#%d 0\n", t);
                continue;
            }

            while(strReverse.indexOf("101") != -1){
                index = strReverse.indexOf("101");
                strReverse = strReverse.substring(index);
                if(strReverse.length() < 95){
                    break;
                }
                String target = strReverse.substring(0, 95);
                String dividerStr = target.substring(45, 50);
                String endStr = target.substring(92,95);

                // 중간과 끝이 유효한 데이터가 아니면 넘어가
                if( !"01010".equals(dividerStr) || !"101".equals(endStr) ){
                    strReverse = strReverse.substring(2);
                    continue;
                }

                // 쉬운 partC부터 발라내자.
                // c코드가 없으면 중단
                boolean isValid = true;
                StringBuilder c = new StringBuilder();
                String partC = target.substring(50, 92);
                for (int i = 0; i < 6; i++) {
                    String code = partC.substring(i*7, (i+1)*7);
                    if(!mapC.containsKey(code)) {
                        isValid = false;
                        break;
                    }
                    c.append(mapC.get(code));
                }
                if(!isValid){
                    strReverse = strReverse.substring(2);
                    continue;
                }

                // partB
                StringBuilder b = new StringBuilder();
                StringBuilder aCode = new StringBuilder();
                StringBuilder a = new StringBuilder();
                String partB = target.substring(3, 45);
                for (int i = 0; i < 6; i++) {
                    String code = partB.substring(i*7, (i+1)*7);

                    // L코드 거나
                    if( mapBL.containsKey(code)){
                        b.append(mapBL.get(code));
                        aCode.append("L");
//                        G코드 거나
                    }else if (mapBG.containsKey(code)){
                        b.append(mapBG.get(code));
                        aCode.append("G");
                    }else{
                        // L도 G도 아니면 유효하지 않음.
                        isValid = false;
                        break;
                    }
                }
                if(!isValid){
                    strReverse = strReverse.substring(2);
                    continue;
                }

                if(!mapA.containsKey(aCode.toString())) {
                    strReverse = strReverse.substring(2);
                    continue;
                }else {
                    a.append(mapA.get(aCode.toString()));
                }

//                System.out.println("a : " + a);
//                System.out.println("b : " + b);
//                System.out.println("c : " + c);

                StringBuilder barcode = new StringBuilder();
                barcode.append(a).append(b).append(c);

                //검증
                int sum = 0;
                for (int i = 0; i < barcode.length()-1; i++) {
                    if(i % 2 == 0) {
                        sum += barcode.charAt(i) - '0';
                    }else {
                        sum += (barcode.charAt(i) - '0') * 3;
                    }
                }
                int checkValue = 10 - (sum % 10);

                if(c.charAt(5) - '0' == checkValue) {
                    list.add(barcode.toString());
                    strReverse = strReverse.substring(2);
                }else {
                    strReverse = strReverse.substring(2);
                }
            }

            if(list.isEmpty()){
                System.out.printf("#%d 0\n", t);
                continue;
            }

            Collections.sort(list);
//            System.out.println("결과");
            System.out.printf("#%d %d", t, list.size());
            for (int i = 0; i < list.size(); i++) {
                System.out.print(" " + list.get(i));
            }
            System.out.println();
//            System.out.println("숫자로는");
//            for (int i = 0; i < list2.size(); i++) {
//                System.out.print(list2.get(i) + " ");
//            }
//            System.out.println();

        }
    }
}
